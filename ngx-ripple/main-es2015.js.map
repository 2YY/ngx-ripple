{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./projects/lib-ngx-ripple/src/lib/lib-ngx-ripple.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport {MatRipple, RippleConfig, RippleRef} from '@angular/material/core';\n\ninterface ActiveRipple {\n  matRipple: MatRipple;\n  rippleRef: RippleRef;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LibNgxRippleService {\n\n  private activeRippleReferences: ActiveRipple[] = [];\n\n  show(matRipple: MatRipple, config?: RippleConfig) {\n    const rippleRef = matRipple.launch(config || {\n      persistent: true,\n      centered: true\n    });\n    this.activeRippleReferences.push({matRipple, rippleRef} as ActiveRipple);\n  }\n\n  hide(matRipple) {\n    const activeRipple = this.activeRippleReferences.find(v => v.matRipple === matRipple);\n    if (activeRipple) {\n      activeRipple.rippleRef.fadeOut();\n      this.activeRippleReferences = this.activeRippleReferences.filter(v => v.matRipple !== matRipple);\n    }\n  }\n}\n","import {Component, ViewChild} from '@angular/core';\nimport {LibNgxRippleService} from '../../projects/lib-ngx-ripple/src/lib/lib-ngx-ripple.service';\nimport {MatRipple} from '@angular/material/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  @ViewChild('btnExample', { read: MatRipple }) btnExampleRef: MatRipple;\n\n  constructor(public rippleService: LibNgxRippleService) {}\n\n}\n","<button\n\t#btnExample\n\tclass=\"btn-example\"\n\tmat-raised-button\n\tmatRipple\n\tcolor=\"primary\"\n\t(mouseenter)=\"rippleService.show(btnExampleRef)\"\n\t(mouseleave)=\"rippleService.hide(btnExampleRef)\"\n\t>Hover Me</button\n>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatRippleModule} from '@angular/material/core';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatRippleModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}